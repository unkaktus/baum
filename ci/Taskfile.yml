## Taskfile to build BAM and perform integration tests

# SGRID tests expect SGRID binary at ./id/bin/sgrid/exe/sgrid,
# SquashFS files for the ID at ./id and EOS files (.pwp/tables)
# at ./eos.

version: '3'

tasks:

## Install dependencies
  install-deps:
      - mamba install --yes -c conda-forge -c https://enlil.gw.physik.uni-potsdam.de/~markin/mamba xdmf compose

  build-and-install-xdmf:
    cmds:
      - git clone https://${GIT_AUTH}git.tpi.uni-jena.de/bamdev/xdmf.git
      - cd xdmf
      - boa build xdmf
      - mamba install --yes --use-local -c conda-forge xdmf
      - cd ..
      - rm -rf xdmf

  build-and-install-compose:
    cmds:
      - boa build compose
      - mamba install --yes --use-local -c conda-forge compose


  list-projects:
    dir: ..
    cmds:
      - cmd : |
          project_names=$(grep "projects" ci/MyConfig.BAM23 | awk '{print $3}' | awk -F '/' '{print $3}');
          echo $project_names;
          for project_name in $project_names;
            do
            echo "Checking $project_name";
            git ls-remote -q --heads https://${GIT_AUTH}git.tpi.uni-jena.de/bamdev/$project_name.git {{.CLI_ARGS}}
          done;
  clone-projects:
    dir: ..
    cmds:
      - rm -rf ./src/projects/*
      - cmd : |
          project_names=$(grep "projects" ci/MyConfig.BAM23 | awk '{print $3}' | awk -F '/' '{print $3}');
          echo $project_names;
          for project_name in $project_names;
            do
            echo "Cloning $project_name";
            git clone https://${GIT_AUTH}git.tpi.uni-jena.de/bamdev/$project_name.git ./src/projects/$project_name;
            cd ./src/projects/$project_name;
            git checkout BAM23 || true;
            cd -;
          done;

## Build BAM
  build:
    dir: ..
    cmds:
      - cp ci/MyConfig.BAM23 MyConfig
      - task: clone-projects
      - touch src/projects/*/*.c
      - touch src/utility/NumericUtils/*c
      - make -j4 new
    silent: true

## Remove all BAM test runs
  clean:
    cmds:
      - cmd: rm -rf parfiles/*/ &>/dev/null # removes runs, leaves parfiles untouched
        ignore_error: true

## Run Schwarzschild BH with geodesic slicing
  run_BH_geoslicing:
    deps: ['clean']
    cmds:
      - cmd: mpirun -n 4 ../exe/bam -nt 2 ./parfiles/BH_geoslicing.par | tee ./parfiles/BH_geoslicing_tee_log
        ignore_error: true
      - grep "crashtime 3.062500" ./parfiles/BH_geoslicing_tee_log
      - rm -rf ./parfiles/BH_geoslicing_tee_log
      - sha256sum --check ./parfiles/BH_geoslicing.sha256sum

## Run 1D Riemann problem
  run_SRHD_1D_blastwave:
    deps: ['clean']
    cmds:
      - ./fail_on_nan.py mpirun -n 4 ../exe/bam -nt 2 ./parfiles/SRHD_1D_blastwave.par
      - sha256sum --check ./parfiles/SRHD_1D_blastwave.sha256sum

## Run polytropic EoS boosted TOV BNS
  run_BNS_boosted_TOV:
    deps: ['clean']
    cmds:
      - ./fail_on_nan.py mpirun -n 4 ../exe/bam -nt 2 ./parfiles/BNS_boosted_TOV.par
      - sha256sum --check ./parfiles/BNS_boosted_TOV.sha256sum


## Run PWP EoS BNS with SGRID (SLy)
  run_BNS_pwp_SLy_q1.2_M2.8:
    deps: ['clean']
    env:
      OMP_NUM_THREADS: 4
    cmds:
      - ./fail_on_nan.py mpirun -n 4 ../exe/bam -nt 4 ./parfiles/SLy_q1.2_M2.8_R64.par
      # Check hashes generated by `update_hashes_BNS_pwp_SLy_q1.2_M2.8` task
      - sha256sum --check ./parfiles/SLy_q1.2_M2.8_R64.sha256sum

  remove_nonreproducible_files_BNS_pwp_SLy_q1.2_M2.8:
    cmds:
      - rm -f parfiles/SLy_q1.2_M2.8_R64/system.log
      - rm -f parfiles/SLy_q1.2_M2.8_R64/running
      - rm -f parfiles/SLy_q1.2_M2.8_R64/stdout.*
      - rm -f parfiles/SLy_q1.2_M2.8_R64/timer.*
      - rm -f parfiles/SLy_q1.2_M2.8_R64/svn_info
      - rm -f parfiles/SLy_q1.2_M2.8_R64/grid_*
      - rm -f parfiles/SLy_q1.2_M2.8_R64/ID_*
      - rm -f parfiles/SLy_q1.2_M2.8_R64/checkpoint.*
      # There are rounding differences, so exclude this for now.
      - rm -rf parfiles/SLy_q1.2_M2.8_R64/output_r

  update_hashes_BNS_pwp_SLy_q1.2_M2.8:
    deps: ['remove_nonreproducible_files_BNS_pwp_SLy_q1.2_M2.8']
    cmds:
      - find parfiles/SLy_q1.2_M2.8_R64/ -type f -exec sha256sum {} \; > ./parfiles/SLy_q1.2_M2.8_R64.sha256sum


## Run tabulated EoS BNS with SGRID (SFHo)
  # Generate EOS table from CompOSE online data
  # Requires code-compose installed via task `install-compose`
  generate_EOS_table_SFHo:
    dir: eos/SFHo
    cmds:
      # Download the EOS
      # Can also be done by `composer download --id 34`
      - curl -L -o eos.zip https://compose.obspm.fr/download//3D/Hempel_SchaffnerBielich/sfho_compose/with_electrons/eos.zip
      - rm -rf eos
      - unzip -d eos eos.zip
      - rm eos.zip
      # Run code-compose
      - cp eos.quantities eos
      # First, generate cold beta-equilibrated EOS
      - cp eos.parameters.cold_beta eos/eos.parameters
      - cd eos; echo 3 | compose
      - mv eos/eos.table SFHo_cold_beta.d
      # Then, the full table
      - cp eos.parameters eos/eos.parameters
      - cd eos; echo 3 | compose
      - mv eos/eos.table SFHo.d
      # Clean up
      - rm -rf eos

  run_BNS_tabulated_SFHo_q1.2_M2.8:
    deps: ['clean']
    env:
      OMP_NUM_THREADS: 4
    cmds:
      - ./fail_on_nan.py mpirun -n 4 ../exe/bam -nt 4 ./parfiles/SFHo_q1.2_M2.8_R64.par
      # Check hashes generated by `update_hashes_BNS_tabulated_SFHo_q1.2_M2.8` task
      - sha256sum --check ./parfiles/SFHo_q1.2_M2.8_R64.sha256sum

  remove_nonreproducible_files_BNS_tabulated_SFHo_q1.2_M2.8:
    cmds:
      - rm -f parfiles/SFHo_q1.2_M2.8_R64/system.log
      - rm -f parfiles/SFHo_q1.2_M2.8_R64/running
      - rm -f parfiles/SFHo_q1.2_M2.8_R64/stdout.*
      - rm -f parfiles/SFHo_q1.2_M2.8_R64/timer.*
      - rm -f parfiles/SFHo_q1.2_M2.8_R64/svn_info
      - rm -f parfiles/SFHo_q1.2_M2.8_R64/grid_*
      - rm -f parfiles/SFHo_q1.2_M2.8_R64/ID_*
      - rm -f parfiles/SFHo_q1.2_M2.8_R64/checkpoint.*
      # There are rounding differences, so exclude this for now.
      - rm -rf parfiles/SFHo_q1.2_M2.8_R64/output_r

  update_hashes_BNS_tabulated_SFHo_q1.2_M2.8:
    deps: ['remove_nonreproducible_files_BNS_tabulated_SFHo_q1.2_M2.8']
    cmds:
      - find parfiles/SFHo_q1.2_M2.8_R64/ -type f -exec sha256sum {} \; > ./parfiles/SFHo_q1.2_M2.8_R64.sha256sum


## Run M1 neutrino beam in 2D in the presense of a BH
  run_M1_BH_2D_beam:
    deps: ['clean']
    cmds:
      - ./fail_on_nan.py mpirun -n 4 ../exe/bam -nt 2 ./parfiles/M1_BH_2D_beam.par
      - sha256sum --check ./parfiles/M1_BH_2D_beam.sha256sum

  remove_nonreproducible_files_M1_BH_2D_beam:
    cmds:
      - rm -f parfiles/M1_BH_2D_beam/system.log
      - rm -f parfiles/M1_BH_2D_beam/running
      - rm -f parfiles/M1_BH_2D_beam/stdout.*
      - rm -f parfiles/M1_BH_2D_beam/timer.*
      - rm -f parfiles/M1_BH_2D_beam/svn_info
      # There are rounding differences, so exclude this for now.
      - rm -rf parfiles/M1_BH_2D_beam/output_1d

  update_hashes_M1_BH_2D_beam:
    deps: ['remove_nonreproducible_files_M1_BH_2D_beam']
    cmds:
      - find parfiles/M1_BH_2D_beam/ -type f -exec sha256sum {} \; > ./parfiles/M1_BH_2D_beam.sha256sum

## Run M1 trapped advection
  run_M1_trapped_advection:
    deps: ['clean']
    cmds:
      - ./fail_on_nan.py mpirun -n 4 ../exe/bam -nt 2 ./parfiles/M1_trapped_advection.par
      - sha256sum --check ./parfiles/M1_trapped_advection.sha256sum

  remove_nonreproducible_files_M1_trapped_advection:
    cmds:
      - rm -f parfiles/M1_trapped_advection/system.log
      - rm -f parfiles/M1_trapped_advection/running
      - rm -f parfiles/M1_trapped_advection/stdout.*
      - rm -f parfiles/M1_trapped_advection/timer.*
      - rm -f parfiles/M1_trapped_advection/svn_info
      # There are rounding differences, so exclude this for now.
      - rm -rf parfiles/M1_trapped_advection/output_1d

  update_hashes_M1_trapped_advection:
    deps: ['remove_nonreproducible_files_M1_trapped_advection']
    cmds:
      - find parfiles/M1_trapped_advection/ -type f -exec sha256sum {} \; > ./parfiles/M1_trapped_advection.sha256sum

## Run BBH test
  run_BBH_mpdata:
    deps: ['clean']
    cmds:
      - ./fail_on_nan.py mpirun -n 4 ../exe/bam -nt 2 ./parfiles/BBH_mpdata.par
      - sha256sum --check ./parfiles/BBH_mpdata.sha256sum

  remove_nonreproducible_files_BBH_mpdata:
    cmds:
      - rm -f parfiles/BBH_mpdata/system.log
      - rm -f parfiles/BBH_mpdata/running
      - rm -f parfiles/BBH_mpdata/stdout.*
      - rm -f parfiles/BBH_mpdata/timer.*
      - rm -f parfiles/BBH_mpdata/svn_info
      # There are rounding differences, so exclude this for now.
      - rm -rf parfiles/BBH_mpdata/output_r
      # These are more than rounding-error different
      - rm -rf parfiles/BBH_mpdata/AHmod_surface*
      - rm -rf parfiles/BBH_mpdata/AHmod_lm/*

  update_hashes_BBH_mpdata:
    deps: ['remove_nonreproducible_files_BBH_mpdata']
    cmds:
      - find parfiles/BBH_mpdata/ -type f -exec sha256sum {} \; > ./parfiles/BBH_mpdata.sha256sum


## Run BBH test
  run_M1_hot_TOV:
    deps: ['clean']
    cmds:
      - ./fail_on_nan.py mpirun -n 4 ../exe/bam -nt 2 ./parfiles/M1_hot_TOV.par
      - sha256sum --check ./parfiles/M1_hot_TOV.sha256sum

  remove_nonreproducible_files_M1_hot_TOV:
    cmds:
      - rm -f parfiles/M1_hot_TOV/system.log
      - rm -f parfiles/M1_hot_TOV/running
      - rm -f parfiles/M1_hot_TOV/stdout.*
      - rm -f parfiles/M1_hot_TOV/timer.*
      - rm -f parfiles/M1_hot_TOV/svn_info
      # There are rounding differences, so exclude this for now.
      - rm -rf parfiles/M1_hot_TOV/output_r
      - rm -rf parfiles/M1_hot_TOV/output_1d


  update_hashes_M1_hot_TOV:
    deps: ['remove_nonreproducible_files_M1_hot_TOV']
    cmds:
      - find parfiles/M1_hot_TOV/ -type f -exec sha256sum {} \; > ./parfiles/M1_hot_TOV.sha256sum

## Run all tests
  run-all:
    cmds:
      - task: run_BH_geoslicing
      - task: run_SRHD_1D_blastwave
      - task: run_BBH_mpdata
      - task: run_BNS_boosted_TOV
      - task: run_BNS_pwp_SLy_q1.2_M2.8
      - task: run_BNS_tabulated_SFHo_q1.2_M2.8
      - task: run_M1_BH_2D_beam
      - task: run_M1_trapped_advection
      - task: clean
